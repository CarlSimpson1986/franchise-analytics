# -*- coding: utf-8 -*-
"""Franchisee Analytics App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nc6JxfOdVH2Jq1syh184T4KA0VCMrmxt
"""

# Let's save our app code to download
app_code = '''
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# Page configuration
st.set_page_config(
    page_title="MyFitPod Franchise Analytics",
    page_icon="🏋️",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
</style>
""", unsafe_allow_html=True)

# Main header
st.markdown('<h1 class="main-header">🏋️ MyFitPod Franchise Analytics</h1>', unsafe_allow_html=True)
st.markdown("### Professional Business Intelligence for Franchise Locations")
st.markdown("---")

def main():
    st.sidebar.title("📊 Navigation")

    # File upload
    uploaded_file = st.sidebar.file_uploader(
        "Upload your monthly CSV file",
        type=['csv'],
        help="Upload your gym transaction data"
    )

    if uploaded_file is not None:
        df = load_data(uploaded_file)
        if df is not None:
            show_dashboard(df)
    else:
        show_welcome()

def load_data(file):
    try:
        df = pd.read_csv(file)
        required_cols = ['Date', 'Item', 'Amount Inc Tax', 'Category']

        if not all(col in df.columns for col in required_cols):
            st.error("❌ Missing required columns")
            return None

        df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)
        df['Month'] = df['Date'].dt.month_name()

        st.success(f"✅ Loaded {len(df)} transactions successfully!")
        return df
    except Exception as e:
        st.error(f"Error: {e}")
        return None

def show_welcome():
    st.markdown("""
    ## 🎯 Welcome to MyFitPod Analytics

    ### Upload your CSV to get:
    - 📊 Revenue analysis vs £6K target
    - 👥 Customer insights
    - 🏆 Product performance
    - 📋 Business intelligence

    **Upload your file using the sidebar to get started!**
    """)

def show_dashboard(df):
    # Key metrics
    col1, col2, col3, col4 = st.columns(4)

    total_revenue = df['Amount Inc Tax'].sum()
    total_transactions = len(df)
    avg_transaction = df['Amount Inc Tax'].mean()

    with col1:
        st.metric("💰 Total Revenue", f"£{total_revenue:,.0f}")
    with col2:
        st.metric("📈 Transactions", f"{total_transactions:,}")
    with col3:
        st.metric("💳 Avg Transaction", f"£{avg_transaction:.2f}")
    with col4:
        months = df['Date'].dt.to_period('M').nunique()
        monthly_avg = total_revenue / max(1, months)
        st.metric("📅 Monthly Average", f"£{monthly_avg:,.0f}")

    st.markdown("---")

    # £6K Target Progress
    st.markdown("## 🎯 Progress Toward £6K Monthly Target")
    target = 6000
    progress = min((monthly_avg / target) * 100, 100)

    # Progress bar
    st.progress(progress / 100)

    if monthly_avg >= target:
        st.success(f"🎉 **TARGET ACHIEVED!** You're making £{monthly_avg:,.0f}/month!")
    else:
        gap = target - monthly_avg
        st.warning(f"📈 **GROWTH NEEDED:** £{gap:,.0f} more to reach £6K target ({progress:.1f}% complete)")

    # Revenue Analysis
    st.markdown("## 📈 Revenue Analysis")

    # Category breakdown
    category_revenue = df.groupby('Category')['Amount Inc Tax'].sum()

    col1, col2 = st.columns(2)

    with col1:
        fig = px.pie(values=category_revenue.values, names=category_revenue.index,
                    title="Revenue by Category")
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        # Top products
        top_products = df.groupby('Item')['Amount Inc Tax'].sum().nlargest(8)
        fig = px.bar(x=top_products.values, y=top_products.index,
                    orientation='h', title="Top Products by Revenue")
        st.plotly_chart(fig, use_container_width=True)

    # Subscription analysis
    st.markdown("## 💳 Business Model Analysis")

    subscription_revenue = df[df['Category'] == 'MEMBERSHIP']['Amount Inc Tax'].sum()
    payg_revenue = df[df['Category'] == 'CREDIT_PACK']['Amount Inc Tax'].sum()
    subscription_pct = (subscription_revenue / total_revenue) * 100 if total_revenue > 0 else 0

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Subscription Revenue", f"£{subscription_revenue:,.0f}")
    with col2:
        st.metric("Pay-as-you-go Revenue", f"£{payg_revenue:,.0f}")
    with col3:
        st.metric("Subscription %", f"{subscription_pct:.1f}%")

    # Business insights
    st.markdown("## 💡 Key Insights")

    insights = []
    if subscription_pct > 50:
        insights.append("✅ Strong subscription focus - recurring revenue base")
    else:
        insights.append("📈 Opportunity: Increase subscription conversions")

    if monthly_avg >= target:
        insights.append("🎯 Monthly target achieved - focus on consistency")
    else:
        insights.append(f"🚀 Need £{target - monthly_avg:,.0f} more monthly to hit target")

    for insight in insights:
        st.info(insight)

if __name__ == "__main__":
    main()
'''

# Save to file for download
with open('franchise_analytics.py', 'w') as f:
    f.write(app_code)

print("✅ App code saved! Download the file and we'll deploy it!")